generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id            Int       @id
  email         String    @db.VarChar(50)
  username      String?   @db.VarChar(50)
  password_hash String    @db.Text
  created_at    DateTime  @default(now()) @db.Timestamp(0)
  deleted_at    DateTime? @db.Timestamp(0)
  user          user      @relation(fields: [id], references: [id], onDelete: Cascade, map: "fk_admin_id_user")
}

model admin_scrap {
  id          Int      @id @default(autoincrement())
  admin_id    Int
  nail_tip_id Int
  created_at  DateTime @default(now()) @db.Timestamp(0)
  user        user     @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "fk_admin_scrap_admin")
  nail_tip    nail_tip @relation(fields: [nail_tip_id], references: [id], onDelete: Cascade, map: "fk_admin_scrap_nail_tip")

  @@index([admin_id], map: "fk_admin_scrap_admin")
  @@index([nail_tip_id], map: "fk_admin_scrap_nail_tip")
}

model banner {
  id         Int       @id @default(autoincrement())
  image_url  String    @db.VarChar(512)
  link       String    @db.VarChar(512)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model nail_assets {
  id                                Int                    @id @default(autoincrement())
  shape                             nail_assets_shape
  asset_type                        nail_assets_asset_type
  image_url                         String                 @db.Text
  uploaded_by                       Int
  is_downloaded                     Boolean?
  created_at                        DateTime               @default(now()) @db.Timestamp(0)
  deleted_at                        DateTime?              @db.Timestamp(0)
  deleted_by                        Int?
  user_nail_assets_deleted_byTouser user?                  @relation("nail_assets_deleted_byTouser", fields: [deleted_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_nail_assets_deleted_by")
  user                              user                   @relation(fields: [uploaded_by], references: [id], onDelete: Cascade, map: "fk_nail_assets_uploaded_by")

  @@index([uploaded_by], map: "fk_nail_assets_uploaded_by")
  @@index([deleted_by], map: "fk_nail_assets_deleted_by")
}

model nail_folder {
  id              Int               @id @default(autoincrement())
  name            String            @unique(map: "name") @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  nail_folder_set nail_folder_set[]
}

model nail_folder_set {
  id          Int         @id @default(autoincrement())
  folder_id   Int
  set_id      Int
  created_at  DateTime    @default(now()) @db.Timestamp(0)
  nail_folder nail_folder @relation(fields: [folder_id], references: [id], onDelete: Cascade, map: "fk_nail_folder_set_folder")
  nail_set    nail_set    @relation(fields: [set_id], references: [id], onDelete: Cascade, map: "fk_nail_folder_set_set")

  @@index([folder_id], map: "fk_nail_folder_set_folder")
  @@index([set_id], map: "fk_nail_folder_set_set")
}

model nail_group {
  id                                          Int        @id @default(autoincrement())
  finger_thumb                                Int
  finger_index                                Int
  finger_middle                               Int
  finger_ring                                 Int
  finger_pinky                                Int
  nail_tip_nail_group_finger_indexTonail_tip  nail_tip   @relation("nail_group_finger_indexTonail_tip", fields: [finger_index], references: [id], onDelete: Cascade, map: "fk_nail_group_index")
  nail_tip_nail_group_finger_middleTonail_tip nail_tip   @relation("nail_group_finger_middleTonail_tip", fields: [finger_middle], references: [id], onDelete: Cascade, map: "fk_nail_group_middle")
  nail_tip_nail_group_finger_pinkyTonail_tip  nail_tip   @relation("nail_group_finger_pinkyTonail_tip", fields: [finger_pinky], references: [id], onDelete: Cascade, map: "fk_nail_group_pinky")
  nail_tip_nail_group_finger_ringTonail_tip   nail_tip   @relation("nail_group_finger_ringTonail_tip", fields: [finger_ring], references: [id], onDelete: Cascade, map: "fk_nail_group_ring")
  nail_tip_nail_group_finger_thumbTonail_tip  nail_tip   @relation("nail_group_finger_thumbTonail_tip", fields: [finger_thumb], references: [id], onDelete: Cascade, map: "fk_nail_group_thumb")
  nail_set                                    nail_set[]

  @@index([finger_index], map: "fk_nail_group_index")
  @@index([finger_middle], map: "fk_nail_group_middle")
  @@index([finger_pinky], map: "fk_nail_group_pinky")
  @@index([finger_ring], map: "fk_nail_group_ring")
  @@index([finger_thumb], map: "fk_nail_group_thumb")
}

model nail_set {
  id              Int               @id @default(autoincrement())
  nail_group_id   Int
  name            String            @db.VarChar(255)
  uploaded_by     Int
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  delete_at       DateTime?         @db.Timestamp(0)
  nail_folder_set nail_folder_set[]
  nail_group      nail_group        @relation(fields: [nail_group_id], references: [id], onDelete: Cascade, map: "fk_nail_set_group")
  user            user              @relation(fields: [uploaded_by], references: [id], onDelete: Cascade, map: "fk_nail_set_uploaded_by")

  @@index([nail_group_id], map: "fk_nail_set_group")
  @@index([uploaded_by], map: "fk_nail_set_uploaded_by")
}

model nail_tip {
  id                                            Int               @id @default(autoincrement())
  shape                                         nail_tip_shape
  color                                         nail_tip_color
  category                                      nail_tip_category
  image_url                                     String            @db.VarChar(512)
  created_at                                    DateTime          @default(now()) @db.Timestamp(0)
  deleted_at                                    DateTime?         @db.Timestamp(0)
  checked_by                                    Int
  admin_scrap                                   admin_scrap[]
  nail_group_nail_group_finger_indexTonail_tip  nail_group[]      @relation("nail_group_finger_indexTonail_tip")
  nail_group_nail_group_finger_middleTonail_tip nail_group[]      @relation("nail_group_finger_middleTonail_tip")
  nail_group_nail_group_finger_pinkyTonail_tip  nail_group[]      @relation("nail_group_finger_pinkyTonail_tip")
  nail_group_nail_group_finger_ringTonail_tip   nail_group[]      @relation("nail_group_finger_ringTonail_tip")
  nail_group_nail_group_finger_thumbTonail_tip  nail_group[]      @relation("nail_group_finger_thumbTonail_tip")
  user                                          user              @relation(fields: [checked_by], references: [id], onDelete: Cascade, map: "fk_nail_tip_checked_by")

  @@index([checked_by], map: "fk_nail_tip_checked_by")
}

model refresh_token {
  token      String    @id @db.VarChar(256)
  user_id    Int
  created_at DateTime  @default(now()) @db.Timestamp(0)
  expires_at DateTime? @db.Timestamp(0)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_refresh_token_user")

  @@index([user_id], map: "fk_refresh_token_user")
}

model social_login {
  id               Int                   @id @default(autoincrement())
  user_id          Int
  platform         social_login_platform
  platform_user_id String?               @db.VarChar(32)
  user             user                  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_social_login_user")

  @@index([user_id], map: "fk_social_login_user")
}

model user {
  id                                       Int                @id @default(autoincrement())
  nickname                                 String?            @db.VarChar(16)
  user_type                                user_user_type
  registered_ip                            String?            @db.VarChar(15)
  created_at                               DateTime           @default(now()) @db.Timestamp(0)
  deleted_at                               DateTime?          @db.Timestamp(0)
  onboarding_steps_bitmask                 Int                @default(0)
  admin                                    admin?
  admin_scrap                              admin_scrap[]
  nail_assets_nail_assets_deleted_byTouser nail_assets[]      @relation("nail_assets_deleted_byTouser")
  nail_assets                              nail_assets[]
  nail_set                                 nail_set[]
  nail_tip                                 nail_tip[]
  refresh_token                            refresh_token[]
  social_login                             social_login[]
  user_preferences                         user_preferences[]
}

model user_preferences {
  id       Int   @id @default(autoincrement())
  user_id  Int
  shape    Float
  color    Float
  category Float
  user     user  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_pref_user")

  @@index([user_id], map: "fk_user_pref_user")
}

enum nail_tip_shape {
  SQUARE
  ROUND
  ALMOND
  BALLERINA
  STILETTO
}

enum nail_assets_shape {
  SQUARE
  ROUND
  ALMOND
  BALLERINA
  STILETTO
}

enum nail_tip_color {
  WHITE
  BLACK
  BEIGE
  PINK
  YELLOW
  GREEN
  BLUE
  SILVER
}

enum nail_assets_asset_type {
  nukki
  ai_generated
}

enum user_user_type {
  CUSTOMER
  STORE
  ADMIN
}

enum social_login_platform {
  KAKAO
  GOOGLE
  APPLE
}

enum nail_tip_category {
  ONE_COLOR
  FRENCH
  GRADIENT
  ART
}
